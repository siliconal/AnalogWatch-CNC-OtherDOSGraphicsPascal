program edit_part;

uses crt,graph,boutunit;

var gs,gm:integer;


Procedure NotePrime(colonne,ligne,largeur,hauteur:word;note:byte);

const      NT1: array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,1,1,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

   NT2 : array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,1,1,1,1,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0));

      NT3: array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,1,1,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      NT4: array[0..19,0..19] of byte=(
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,1,1,1,1,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

     NT5: array[0..19,0..19] of byte=(
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,2,1,1,2,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

       NT6: array[0..19,0..19] of byte=(

(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,2,2,2,1,1,1,1,2,2,2,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

       NT7: array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      NT8 : array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0));

      NT9: array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      NT10: array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      NT11: array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

var   x,y:byte;
      couleur,codeerr:integer;
begin
     for y:=0 to 19 do
     begin
          for x:=0 to 19 do
              case note of
                   1:if NT1[y,x]<>0 then
                                     begin
                                          couleur:=NT1[y,x]-1;
                                          putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                     end;
                   2:if NT2[y,x]<>0 then
                                   begin
                                        couleur:=NT2[y,x]-1;
                                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                   3:if NT3[y,x]<>0 then
                                  begin
                                      couleur:=NT3[y,x]-1;
                                      putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                  end;
                   4:if NT4[y,x]<>0 then
                                    begin
                                        couleur:=NT4[y,x]-1;
                                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                    end;
                   5:if NT5[y,x]<>0 then
                                   begin
                                       couleur:=NT5[y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                   6:if NT6[y,x]<>0 then
                                   begin
                                       couleur:=NT6[y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                   7:if NT7[y,x]<>0 then
                                   begin
                                       couleur:=NT7[y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                   8:if NT8[y,x]<>0 then
                                   begin
                                       couleur:=NT8[y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                   9:if NT9[y,x]<>0 then
                                   begin
                                       couleur:=NT9[y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  10:if NT10[y,x]<>0 then
                                   begin
                                       couleur:=NT10[y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  11:if NT11[y,x]<>0 then
                                   begin
                                       couleur:=NT11[y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  21:if NT2[19-y,x]<>0 then
                                   begin
                                        couleur:=NT2[19-y,x]-1;
                                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  20:if NT3[19-y,x]<>0 then
                                  begin
                                      couleur:=NT3[19-y,x]-1;
                                      putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                  end;
                  19:if NT4[19-y,x]<>0 then
                                    begin
                                        couleur:=NT4[19-y,x]-1;
                                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                    end;
                  18:if NT5[19-y,x]<>0 then
                                   begin
                                       couleur:=NT5[19-y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  17:if NT6[19-y,x]<>0 then
                                   begin
                                       couleur:=NT6[19-y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  16:if NT7[19-y,x]<>0 then
                                   begin
                                       couleur:=NT7[19-y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  15:if NT8[19-y,x]<>0 then
                                   begin
                                       couleur:=NT8[19-y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  14:if NT9[19-y,x]<>0 then
                                   begin
                                       couleur:=NT9[19-y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  13:if NT10[19-y,x]<>0 then
                                   begin
                                       couleur:=NT10[19-y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
                  12:if NT11[19-y,x]<>0 then
                                   begin
                                       couleur:=NT11[19-y,x]-1;
                                       putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                   end;
              end;
     end;
end;

Procedure PNotePrime(codebouton,note:byte);
var   z:byte;
      ligne,colonne,largeur,hauteur:word;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     noteprime(colonne,ligne,largeur,hauteur,note);
end;


Procedure NoteSeconde(colonne,ligne,largeur,hauteur:word;note:byte);

const  NT1 : array[0..19,0..19] of byte=(

(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

var   x,y:byte;
      couleur,codeerr:integer;
begin
     for y:=0 to 19 do
     begin
          for x:=0 to 19 do
              case note of
                   1:if NT1[y,x]<>0 then
                                     begin
                                          couleur:=NT1[y,x]-1;
                                          putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,couleur);
                                     end;
              end;
     end;
end;

Procedure PNoteSeconde(codebouton,note:byte);
var    ligne,colonne,largeur,hauteur:word;
       z:byte;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     NoteSeconde(colonne,ligne,largeur,hauteur,note);
end;


{TIFINAGH : array[0..19,0..19] of byte=(
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0),
(0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0),
(0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0),
(0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0),
(0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
(0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0),
(0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0),
(0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0),
(0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));}


Procedure Duree(colonne,ligne,largeur,hauteur:word;duree:byte);

const  DBLECROCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      CROCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      NOIRE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      BLANCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      RONDE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      RONDECARRE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      TRPLECROCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0),
      (0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      POINT : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      DBLEPOINT : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0),
      (0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0),
      (0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0),
      (0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      LIAISON : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0),
      (0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0),
      (0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      TRIOLET : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0),
      (0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0),
      (0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

var x,y:byte;

begin
     for y:=0 to 19 do
     begin
          for x:=0 to 19 do
              case duree of
                   4:if NOIRE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   5:if CROCHE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   6:if DBLECROCHE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   7:if TRPLECROCHE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   3:if BLANCHE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   2:if RONDE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   1:if RONDECARRE[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);

                   12:if RONDECARRE[19-y,19-x]=1 then
                   begin
                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   end;
                   13:if RONDE[19-y,19-x]=1 then
                   begin
                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   end;
                   15:if NOIRE[19-y,19-x]=1 then
                   begin
                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   end;
                   16:if CROCHE[19-y,19-x]=1 then
                   begin
                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   end;
                   17:if DBLECROCHE[19-y,19-x]=1 then
                   begin
                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   end;
                   18:if TRPLECROCHE[19-y,19-x]=1 then
                   begin
                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   end;
                   14:if BLANCHE[19-y,19-x]=1 then
                   begin
                        putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   end;

                   8:if POINT[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   9:if DBLEPOINT[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   10:if LIAISON[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   11:if TRIOLET[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
              end;
     end;
end;

Procedure PDuree(codebouton,signe:byte);
var ligne,colonne,largeur,hauteur:word;
    z:byte;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     duree(colonne,ligne,largeur,hauteur,signe);
end;

Procedure DurSilen(colonne,ligne,largeur,hauteur:word;duree:byte);
const     SOUP : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2),
      (0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      DMSP : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0),
      (2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      CROCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0),
      (0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      DBLCROCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0));

      TRPLCROCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0));

      QDRPLCROCHE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,1,1,0,0,0,0,0,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0));

var x,y:byte;
begin
     for y:=0 to 19 do
     begin
          for x:=0 to 19 do
              case duree of
                   1:if SOUP[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,SOUP[y,x]-1);
                   2:if DMSP[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,DMSP[Y,X]-1);
                   3:if CROCHE[y,19-x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   4:if CROCHE[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   5:if DBLCROCHE[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   6:if TRPLCROCHE[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   7:if QDRPLCROCHE[Y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
              end;
     end;
end;

Procedure PDurSilen(codebouton,signe:byte);
var ligne,colonne,largeur,hauteur:word;
    z:byte;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     dursilen(colonne,ligne,largeur,hauteur,signe);
end;

Procedure Cle(colonne,ligne,largeur,hauteur:word;cle:byte);

const  SOL : array[0..19,0..19] of byte=(

      (0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,1,2,1,1,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0),
      (2,2,2,2,2,1,1,2,2,1,2,1,2,1,1,2,2,2,2,2),
      (0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,0,0),
      (0,0,0,0,0,1,1,0,1,0,0,1,0,0,1,1,0,0,0,0),
      (0,0,0,0,0,1,1,0,1,0,0,1,1,0,1,1,0,0,0,0),
      (2,2,2,2,2,1,1,2,2,1,1,1,2,2,1,2,2,2,2,2),
      (0,0,0,0,0,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,1,1,1,1,2,2,1,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0));

      FA3 : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (2,2,1,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2),
      (0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0),
      (0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0),
      (0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (2,2,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2),
      (0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0));

      FA4 : array[0..19,0..19] of byte=(
      (0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (2,2,1,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2),
      (0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0),
      (0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,1,1,1,0,0),
      (0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (2,2,1,1,1,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2),
      (0,0,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (0,0,0,0,1,1,0,0,0,0,0,1,1,0,0,1,1,1,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      UT1 : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0));

      UT2 : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0));

      UT3 : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0));

      UT4 : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,2,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0),
      (0,0,1,1,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0),
      (0,0,1,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0),
      (2,2,1,1,1,2,2,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (2,2,1,1,1,2,1,2,2,2,1,2,2,2,2,2,2,2,2,2),
      (0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0));

var x,y:byte;
begin
     for y:=0 to 19 do
     begin
          for x:=0 to 19 do
              case cle of
                   7:if UT4[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,UT4[y,x]-1);
                   6:if UT3[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,UT3[Y,X]-1);
                   5:if UT2[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,UT2[Y,X]-1);
                   4:if UT1[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,UT1[Y,X]-1);
                   3:if FA4[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,FA4[Y,X]-1);
                   2:if FA3[y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,FA3[Y,X]-1);
                   1:if SOL[Y,x]<>0 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,SOL[Y,X]-1);
              end;
     end;
end;

Procedure PCle(codebouton,signe:Byte);
var ligne,colonne,largeur,hauteur:word;
    z:byte;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     Cle(colonne,ligne,largeur,hauteur,signe);
end;

Procedure Mesure(colonne,ligne,largeur,hauteur:word;mesure:byte);

const     UN_DEUX : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

        DEUX_DEUX : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

        DEUX_QUATRE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

        TROIX_QUATRE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

         QUATRE_QUATRE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

        TROIX_HUIT : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0));

        SIX_HUIT : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0));

       NEUF_HUIT : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0));

      DOUZE_HUIT : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0));

      HUIT_DIX : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));
var x,y:byte;
begin
     for y:=0 to 19 do
     begin
          for x:=0 to 19 do
              case mesure of
                   1:if UN_DEUX[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   2:if DEUX_DEUX[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   3:if DEUX_QUATRE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   4:if TROIX_QUATRE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   5:if QUATRE_QUATRE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   6:if TROIX_HUIT[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   7:if SIX_HUIT[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   8:if NEUF_HUIT[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   9:if DOUZE_HUIT[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                  10:if HUIT_DIX[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
              end;
     end;
end;

Procedure Pmesure(codebouton,signe:byte);
var ligne,colonne,largeur,hauteur:word;
    z:byte;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     mesure(colonne,ligne,largeur,hauteur,signe);
end;
Procedure Signe_Transf(colonne,ligne,largeur,hauteur:word;signe:byte);

const     DIESE : array[0..10,0..10] of byte=(
      (0,0,0,0,0,0,1,0,0,0,0),
      (0,0,0,1,0,0,1,1,1,0,0),
      (0,0,0,1,1,1,1,1,1,0,0),
      (0,1,1,1,1,1,1,0,0,0,0),
      (0,1,1,1,0,0,1,0,0,0,0),
      (0,0,0,1,0,0,1,0,0,0,0),
      (0,0,0,1,0,0,1,1,1,0,0),
      (0,0,0,1,1,1,1,1,1,0,0),
      (0,1,1,1,1,1,1,0,0,0,0),
      (0,1,1,1,0,0,1,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,0,0));

       DBLEDIESE : array[0..10,0..10] of byte=(
      (0,0,0,0,0,0,1,0,1,0,0),
      (0,0,0,1,0,0,1,0,0,0,0),
      (0,1,0,1,0,0,1,1,1,0,0),
      (0,0,0,1,1,1,1,1,1,0,0),
      (0,1,1,1,1,1,1,0,0,0,0),
      (0,1,1,1,0,0,1,1,1,0,0),
      (0,0,0,1,1,1,1,1,1,0,0),
      (0,1,1,1,1,1,1,0,0,0,0),
      (0,1,1,1,0,0,1,0,1,0,0),
      (0,0,0,1,0,0,1,0,0,0,0),
      (0,1,0,1,0,0,0,0,0,0,0));


      BEMOLE : array[0..10,0..10] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,0,0),
      (0,0,1,0,0,1,1,1,0,0,0),
      (0,0,1,0,1,1,1,1,0,0,0),
      (0,0,1,1,0,0,0,1,0,0,0),
      (0,1,1,1,1,1,1,0,0,0,0));

      BEMOLE_QUART : array[0..10,0..10] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,1,0,1,1,0,0,0),
      (0,0,0,0,1,1,0,0,0,0,0),
      (0,0,1,1,0,0,0,0,0,0,0),
      (1,1,0,1,0,0,0,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,0,0),
      (0,0,1,0,0,1,1,1,0,0,0),
      (0,0,1,0,1,1,1,1,0,0,0),
      (0,0,1,1,0,0,0,1,0,0,0),
      (0,1,1,1,1,1,1,0,0,0,0));

       BECARE : array[0..10,0..10] of byte=(
      (0,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,1,1,1,1,1,0,0,0),
      (0,0,0,1,1,1,1,1,0,0,0),
      (0,0,1,0,0,0,0,1,0,0,0),
      (0,0,1,1,1,1,1,0,0,0,0),
      (0,0,1,1,1,1,1,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,0,0));

       DIESE_QUART : array[0..10,0..10] of byte=(
      (0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,1,0,1,1,0,0),
      (0,0,0,0,1,1,1,1,1,0,0),
      (0,0,1,1,1,1,1,0,0,0,0),
      (0,0,1,1,0,1,0,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,1,0,1,1,0,0),
      (0,0,0,0,1,1,1,1,1,0,0),
      (0,0,1,1,1,1,1,0,0,0,0),
      (0,0,1,1,0,1,0,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,0,0));
var x,y:byte;
begin
     for y:=0 to 10 do
     begin
          for x:=0 to 10 do
              case signe of
                   1:if DIESE[y,x]=1 then putpixel(colonne+((largeur-11) div 2)+x,ligne+((hauteur-11) div 2)+y+1,0);
                   2:if BEMOLE[y,x]=1 then putpixel(colonne+((largeur-11) div 2)+x,ligne+((hauteur-11) div 2)+y+1,0);
                   4:if DIESE_QUART[y,x]=1 then putpixel(colonne+((largeur-11) div 2)+x,ligne+((hauteur-11) div 2)+y+1,0);
                   5:if BEMOLE_QUART[y,x]=1 then putpixel(colonne+((largeur-11) div 2)+x,ligne+((hauteur-11) div 2)+y+1,0);
                   3:if BECARE[y,x]=1 then putpixel(colonne+((largeur-11) div 2)+x,ligne+((hauteur-11) div 2)+y+1,0);
                   6:if DBLEDIESE[y,x]=1 then putpixel(colonne+((largeur-11) div 2)+x,ligne+((hauteur-11) div 2)+y+1,0);
                   {7:if SIX_HUIT[Y,x]=1 then putpixel(colonne+((largeur-11) div 2)+x,ligne+((hauteur-11) div 2)+y+1,0);}
              end;
     end;
end;

Procedure Psigne_transf(codebouton,signe:byte);
var  ligne,colonne,largeur,hauteur:word;
     z:byte;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     signe_transf(colonne,ligne,largeur,hauteur,signe);
end;

Procedure Signe_Repet(colonne,ligne,largeur,hauteur:word;signe:byte);

const     ESSE : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      ALCODA : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      DBLEBARPTDB : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      DBLEBARFN : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      DBLEBAR1 : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

      BAR2 : array[0..19,0..19] of byte=(
      (0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,1,1,1,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),
      (0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0));

var x,y,z:byte;
begin
     for y:=0 to 19 do
     begin
          for x:=0 to 19 do
              case signe of
                   1:if ESSE[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   2:if DBLEBARPTDB[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   3:if DBLEBARPTDB[y,19-x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   4:if DBLEBAR1[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   5:if BAR2[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   6:if ALCODA[y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
                   7:if DBLEBARFN[Y,x]=1 then putpixel(colonne+((largeur-20) div 2)+x,ligne+((hauteur-20) div 2)+y+1,0);
              end;
     end;
end;

Procedure Psigne_repet(codebouton,signe:byte);
var  ligne,colonne,largeur,hauteur:word;
     z:byte;
begin
     z:=1;
     while (z<=80) and (caractbouton[z,5]<>codebouton) do inc(z);
     if z<=80 then
     begin
          ligne:=caractbouton[z,1];
          colonne:=caractbouton[z,2];
          largeur:=caractbouton[z,3];
          hauteur:=caractbouton[z,4];
     end;
     signe_repet(colonne,ligne,largeur,hauteur,signe);
end;

{===affichage des cles===}
Procedure affcle(colonne,ligne:word);
begin
     setfillstyle(1,7);
     bar(colonne,ligne,colonne+305,ligne+53);
     setfillstyle(1,2);
     bar(colonne+5,ligne+5,colonne+300,ligne+48);
     contour(colonne,ligne,305,53,1,FALSE);
     contour(colonne+5,ligne+5,295,43,0,TRUE);
     affbouton(15+colonne,11+ligne,30,30,'',2);
     PCle(2,1);
     affbouton(15+colonne+10+30,11+ligne,30,30,'',3);
     Pcle(3,2);
     affbouton(15+colonne+((10+30)*2),11+ligne,30,30,'',4);
     Pcle(4,3);
     AFFBOUTON(15+colonne+((10+30)*3),11+ligne,30,30,'',5);
     Pcle(5,4);
     AFFBOUTON(15+colonne+((10+30)*4),11+ligne,30,30,'',6);
     Pcle(6,5);
     affbouton(15+colonne+((10+30)*5),11+ligne,30,30,'',7);
     Pcle(7,6);
     AFFBOUTON(15+colonne+((10+30)*6),11+ligne,30,30,'',8);
     Pcle(8,7);
end;

{===affichage des vitesses===}
Procedure affvitesse(colonne,ligne:word);
begin
     setfillstyle(1,7);
     bar(colonne,ligne,colonne+363,ligne+77);
     setfillstyle(1,2);
     bar(colonne+5,ligne+5,colonne+358,ligne+72);
     contour(colonne,ligne,363,77,1,FALSE);
     contour(colonne+5,ligne+5,353,67,0,TRUE);
     AFFBOUTON(8+colonne,13+ligne,86,20,'Largo',19);
     affbouton(8+colonne+1+86,13+ligne,87,20,'Largitto',20);
     affbouton(8+colonne+((1+86)*2),13+ligne,86,20,'Andantino',21);
     affbouton(8+colonne+((1+86)*3),13+ligne,86,20,'Andante',22);
     affbouton(8+colonne,13+ligne+10+20,86,20,'Moderato',23);
     affbouton(8+colonne+1+86,13+ligne+10+20,87,20,'Allegretto',24);
     AFFBOUTON(8+colonne+((1+86)*2),13+ligne+10+20,86,20,'Allegro',25);
     AFFBOUTON(8+colonne+((1+86)*3),13+ligne+10+20,86,20,'Vivace',26);
end;

{===affichage des durees===}
Procedure affduree(colonne,ligne:word);
begin
     AFFBOUTON(10+colonne,10+ligne,30,30,'',35);
     Pduree(35,1);
     AFFBOUTON(10+colonne+5+30,10+ligne,30,30,'',36);
     Pduree(36,2);
     AFFBOUTON(10+colonne+((5+30)*2),10+ligne,30,30,'',37);
     Pduree(37,3);
     AFFBOUTON(10+colonne+((5+30)*3),10+ligne,30,30,'',38);
     Pduree(38,4);
     AFFBOUTON(10+colonne+((5+30)*4),10+ligne,30,30,'',39);
     Pduree(39,5);
     AFFBOUTON(10+colonne+((5+30)*5),10+ligne,30,30,'',40);
     Pduree(40,6);
     AFFBOUTON(10+colonne+((+5+30)*6),10+ligne,30,30,'',41);
     Pduree(41,7);
     AFFBOUTON(10+colonne+((5+30)*7)+5,10+ligne,30,30,'',42);
     Pduree(42,8);
     AFFBOUTON(10+colonne+((5+30)*8)+5,10+ligne,30,30,'',43);
     Pduree(43,9);
end;

{===affichage des durees de silence===}
Procedure affdursilen(colonne,ligne:word);
begin
     setfillstyle(1,2);
     bar(colonne+256,8+ligne,colonne+260+70,8+ligne+34);
     AFFBOUTON(10+colonne,10+ligne,30,30,'',35);
     Pdursilen(35,1);
     AFFBOUTON(10+colonne+5+30,10+ligne,30,30,'',36);
     Pdursilen(36,2);
     AFFBOUTON(10+colonne+((5+30)*2),10+ligne,30,30,'',37);
     Pdursilen(37,3);
     AFFBOUTON(10+colonne+((5+30)*3),10+ligne,30,30,'',38);
     Pdursilen(38,4);
     AFFBOUTON(10+colonne+((5+30)*4),10+ligne,30,30,'',39);
     Pdursilen(39,5);
     AFFBOUTON(10+colonne+((5+30)*5),10+ligne,30,30,'',40);
     Pdursilen(40,6);
     AFFBOUTON(10+colonne+((+5+30)*6),10+ligne,30,30,'',41);
     Pdursilen(41,7);
end;

{===affichage des durees et liaison===}
Procedure affbardur(colonne,ligne:word);
begin
     setfillstyle(1,7);
     bar(colonne,ligne,colonne+420,ligne+50);
     setfillstyle(1,2);
     bar(colonne+5,ligne+5,colonne+415,ligne+45);
     contour(colonne,ligne,420,50,1,false);
     contour(colonne+5,ligne+5,410,40,0,true);
     AFFBOUTON(10+colonne+((+5+30)*9)+20,10+ligne,30,30,'',44);
     Pduree(44,10);
     AFFBOUTON(10+colonne+((+5+30)*10)+20,10+ligne,30,30,'',45);
     Pduree(45,11);
end;

{===affichage des mesures===}
Procedure affmesure(colonne,ligne:word);
begin
     setfillstyle(1,7);
     bar(colonne,ligne,colonne+269,ligne+81);
     setfillstyle(1,2);
     bar(colonne+5,ligne+5,colonne+264,ligne+76);
     contour(colonne,ligne,269,81,1,false);
     contour(colonne+5,ligne+5,259,71,0,true);
     AffBouton(22+colonne,8+ligne,30,30,'',9);
     Pmesure(9,1);
     affbouton(22+colonne+18+30,8+ligne,30,30,'',10);
     Pmesure(10,2);
     affbouton(22+colonne+((18+30)*2),8+ligne,30,30,'',11);
     Pmesure(11,3);
     affbouton(22+colonne+((18+30)*3),8+ligne,30,30,'',12);
     Pmesure(12,4);
     affbouton(22+colonne+((18+30)*4),8+ligne,30,30,'',13);
     Pmesure(13,5);
     affbouton(22+colonne,8+ligne+4+30,30,30,'',14);
     Pmesure(14,6);
     affbouton(22+colonne+18+30,8+ligne+4+30,30,30,'',15);
     Pmesure(15,7);
     affbouton(22+colonne+((18+30)*2),8+ligne+4+30,30,30,'',16);
     Pmesure(16,8);
     affbouton(22+colonne+((18+30)*3),8+ligne+4+30,30,30,'',17);
     Pmesure(17,9);
     affbouton(22+colonne+((18+30)*4),8+ligne+4+30,30,30,'',18);
     Pmesure(18,10);
end;

{===affichage des signes de repetition===}
Procedure AffRepet(colonne,ligne:word);
begin
     setfillstyle(1,7);
     bar(colonne,ligne,colonne+269,ligne+49);
     setfillstyle(1,2);
     bar(colonne+5,ligne+5,colonne+264,ligne+44);
     contour(colonne,ligne,269,49,1,false);
     contour(colonne+5,ligne+5,259,39,0,true);
     affbouton(10+colonne,10+ligne,25,30,'',27);
     Psigne_repet(27,1);
     affbouton(10+colonne+5+25,10+ligne,25,30,'',28);
     Psigne_repet(28,2);
     affbouton(10+colonne+((5+25)*2),10+ligne,25,30,'',29);
     Psigne_repet(29,3);
     affbouton(10+colonne+((5+25)*3),10+ligne,25,30,'',30);
     Psigne_repet(30,4);
     affbouton(10+colonne+((5+25)*4),10+ligne,25,30,'',31);
     Psigne_repet(31,5);
     affbouton(10+colonne+((5+25)*5),10+ligne,25,30,'',32);
     Psigne_repet(32,6);
     affbouton(10+colonne+((5+25)*6),10+ligne,25,30,'',33);
     Psigne_repet(33,7);
     affbouton(10+colonne+((5+25)*7),10+ligne,35,30,'Fin',34);
end;

{===AFFICHAGE DES SIGNES DE TRANSFORMATION===}
Procedure AffTransf(colonne,ligne:word);
begin
     setfillstyle(1,7);
     bar(colonne,ligne,colonne+212,ligne+50);
     setfillstyle(1,2);
     bar(colonne+5,ligne+5,colonne+207,ligne+45);
     contour(colonne,ligne,212,50,1,FALSE);
     contour(colonne+5,ligne+5,202,40,0,TRUE);
     AffBouton(15+colonne,12+ligne,25,25,'',46);
     PSigne_Transf(46,1);
     AffBouton(15+colonne+5+25,12+ligne,25,25,'',47);
     PSigne_Transf(47,2);
     AffBouton(15+colonne+((5+25)*2),12+ligne,25,25,'',48);
     PSigne_Transf(48,3);
     AffBouton(15+colonne+((5+25)*3),12+ligne,25,25,'',49);
     PSigne_Transf(49,4);
     AffBouton(15+colonne+((5+25)*4),12+ligne,25,25,'',50);
     PSigne_Transf(50,5);
     AffBouton(15+colonne+((5+25)*5),12+ligne,25,25,'',51);
     PSigne_Transf(51,6);
end;

{===AFFICHAGE DES NOTES BASSES===}
Procedure AffNotesPrime(colonne,ligne:word);
begin
     affbouton(10+colonne+((5+60)*2)+((5+30)*3),10+ligne,30,30,'',56);
     PNotePrime(56,1);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*4),10+ligne,30,30,'',57);
     PNotePrime(57,2);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*5),10+ligne,30,30,'',58);
     PNotePrime(58,3);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*6),10+ligne,30,30,'',59);
     PNotePrime(59,4);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*7),10+ligne,30,30,'',60);
     PNotePrime(60,5);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*8),10+ligne,30,30,'',61);
     PNotePrime(61,6);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*9),10+ligne,30,30,'',62);
     PNotePrime(62,7);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*10),10+ligne,30,30,'',63);
     PNotePrime(63,8);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*11),10+ligne,30,30,'',64);
     PNotePrime(64,9);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*12),10+ligne,30,30,'',65);
     PNotePrime(65,10);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*13),10+ligne,30,30,'',66);
     PNotePrime(66,11);
end;

{===AFFICHAGE DES NOTES HAUTES===}
Procedure AffNotesSecond(colonne,ligne:word);
begin
     affbouton(10+colonne+((5+60)*2)+((5+30)*3),10+ligne,30,30,'',56);
     PNoteSeconde(56,1);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*4),10+ligne,30,30,'',57);
     PNotePrime(57,12);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*5),10+ligne,30,30,'',58);
     PNotePrime(58,13);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*6),10+ligne,30,30,'',59);
     PNotePrime(59,14);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*7),10+ligne,30,30,'',60);
     PNotePrime(60,15);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*8),10+ligne,30,30,'',61);
     PNotePrime(61,16);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*9),10+ligne,30,30,'',62);
     PNotePrime(62,17);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*10),10+ligne,30,30,'',63);
     PNotePrime(63,18);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*11),10+ligne,30,30,'',64);
     PNotePrime(64,19);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*12),10+ligne,30,30,'',65);
     PNotePrime(65,20);
     AffBouton(10+colonne+((5+60)*2)+((5+30)*13),10+ligne,30,30,'',66);
     PNotePrime(66,21);
end;

{===affichage de la barre des notes===}
Procedure Affbarnotes(colonne,ligne:byte);
begin
     setfillstyle(1,7);
     bar(colonne,ligne,colonne+634,ligne+50);
     setfillstyle(1,2);
     bar(colonne+5,ligne+5,colonne+629,ligne+45);
     contour(colonne,ligne,634,50,1,false);
     contour(colonne+5,ligne+5,624,40,0,true);
     AffBouton(10+colonne,10+ligne,60,30,'Basses',53);
     AffBouton(10+colonne+70,10+ligne,60,30,'Hautes',54);
     affbouton(10+colonne+((5+60)*2)+5+25,10+ligne,70,30,'Silence',55);
end;

PROCEDURE ecransaisie;
begin
     SETCOLOR(0);
     AffBouton(3,3,53,51,'Menu',1);
     affcle(60,2);
     affmesure(367,2);
     affvitesse(2,57);
     affrepet(367,85);
     affbardur(2,136);
     affduree(2,136);
     AffTransf(424,136);
     AffBarNotes(2,188);
     affnotesprime(2,188);

     setfillstyle(1,15);
     bar(2,240,636,446);
     SETCOLOR(1);
     setlinestyle(0,1,1);
     line(5,256,633,256);
     line(5,260,633,260);
     line(5,264,633,264);
     line(5,268,633,268);
     line(5,272,633,272);

     line(5,296,633,296);
     line(5,300,633,300);
     line(5,304,633,304);
     line(5,308,633,308);
     line(5,312,633,312);

     line(5,336,633,336);
     line(5,340,633,340);
     line(5,344,633,344);
     line(5,348,633,348);
     line(5,352,633,352);

     line(5,376,633,376);
     line(5,380,633,380);
     line(5,384,633,384);
     line(5,388,633,388);
     line(5,392,633,392);

     line(5,416,633,416);
     line(5,420,633,420);
     line(5,424,633,424);
     line(5,428,633,428);
     line(5,432,633,432);
end;

procedure menu;
begin
     setcolor(0);
     SETFILLSTYLE(1,7);
     BAR(205,205,205+200,205+240);
     CONTOUR(205,205,200,240,3,FALSE);
     contour(215,215,180,220,2,true);
     contour(225,225,160,20,1,true);
     contour(225,255,160,170,0,false);
     settextstyle(0,0,1);
     setfillstyle(1,3);
     bar(227,227,227+156,227+16);
     outtextxy(305,235,'Menu');
     affbouton(245,270,120,16,'Creer',70);
     AFFBOUTON(245,290,120,16,'Editer..',71);
     affbouton(245,310,120,16,'Enregistrer..',72);
     affbouton(245,330,120,16,'Modifier',73);
     affbouton(245,350,120,16,'Ajouter',74);
     affbouton(245,370,120,16,'Aide',75);
     AFFBOUTON(245,390,120,16,'Quitter',76);
end;

{===saisie de la partition===}
Procedure Saisie;
var       linecourant,colcourant:word;
          clecourant,vitcourant,mescourant,armcourant,repetcourant,poscourant,transcourant,durcourant:byte;
          notearmure,pospreced,durpreced,transpreced,repetpreced:byte;
          c,ch:char;
          notetrans:byte;
          audessus:shortint;
          text:string[10];
          dursilenaff,noteprimeaff:boolean;
          size:word;
          img:pointer;

Procedure Retourline;
begin
     if colcourant>625 then
     begin
          colcourant:=5;
          inc(linecourant,40);
          case clecourant of
               2:audessus:=2;
               3:audessus:=3;
               4:audessus:=3;
               5:audessus:=-5;
               6:audessus:=-1;
               7:audessus:=3;
               8:audessus:=7;
          end;
          cle(colcourant,linecourant-audessus,20,20,clecourant-1);
          inc(colcourant,15);
     end;
end;

begin
     colcourant:=5;
     linecourant:=256;

     dursilenaff:=false;
     noteprimeaff:=true;
     ch:='C';
     while (upcase(ch)='C') do
     begin
     {===saisie de la cle===}
     clecourant:=2;
     boutonselect(clecourant);
     c:=readkey;
     while (ord(c)<>13) do
     begin
           case ord(c) of
                77:inc(clecourant);
                75:dec(clecourant);
           end;
           if clecourant<2  then clecourant:=8;
           if clecourant>8 then clecourant:=2;
           boutonselect(clecourant);
           c:=readkey;
     end;
     boutonappuie(clecourant);
     case clecourant of
          2:audessus:=2;
          3:audessus:=3;
          4:audessus:=3;
          5:audessus:=-5;
          6:audessus:=-1;
          7:audessus:=3;
          8:audessus:=7;
     end;
     if colcourant<>5 then inc(colcourant,10);
     cle(colcourant,linecourant-audessus,20,20,clecourant-1);
     inc(colcourant,15);
     retourline;

     {===saisie de la vitesse===}
     vitcourant:=19;
     boutonselect(vitcourant);
     c:=readkey;
     while (ord(c)<>13) do
     begin
          case ord(c) of
               77:inc(vitcourant);
               75:dec(vitcourant);
               72:dec(vitcourant,4);
               80:inc(vitcourant,4);
          end;
          if vitcourant<19  then vitcourant:=26;
          if vitcourant>26 then vitcourant:=19;
          boutonselect(vitcourant);
          c:=readkey;
     end;
     boutonappuie(vitcourant);
     case vitcourant of
          19:text:='Largo';
          20:text:='Largitto';
          21:text:='Andantino';
          22:text:='Andante';
          23:text:='Moderato';
          24:text:='Allegretto';
          25:text:='Alegro';
          26:text:='Vivace';
     end;
     settextstyle(2,0,4);
     outtextxy(colcourant+9,linecourant-11,text);

     {===saisie de la mesure===}
     mescourant:=9;
     boutonselect(mescourant);
     c:=readkey;
     while (ord(c)<>13) do
     begin
           case ord(c) of
                77:inc(mescourant);
                75:dec(mescourant);
                72:dec(mescourant,5);
                80:inc(mescourant,5);
           end;
           if mescourant<9  then mescourant:=18;
           if mescourant>18 then mescourant:=9;
           boutonselect(mescourant);
           c:=readkey;
     end;
     boutonappuie(mescourant);
     mesure(colcourant,linecourant-2,20,20,mescourant-8);
     inc(colcourant,15);
     retourline;

     {===saisie de l'armure===}
     armcourant:=46;
     boutonselect(armcourant);
     c:=readkey;
     while (ord(c)<>13) and (ord(c)<>27) do
     begin
           case ord(c) of
                77:inc(armcourant);
                75:dec(armcourant);
           end;
           if armcourant<46 then armcourant:=47;
           if armcourant>47 then armcourant:=46;
           boutonselect(armcourant);
           c:=readkey;
     end;
     if ord(c)=13 then
     begin
          boutonappuie(armcourant);

          size:=imagesize(390,180,540,400);
          getmem(img,size);
          getimage(390,180,540,400,img^);
          setfillstyle(1,7);
          bar(390,180,540,400);
          contour(390,180,150,220,3,false);
          contour(400,190,130,200,2,true);
          contour(408,230,114,154,0,false);
          contour(408,197,114,28,1,true);
          SETFILLSTYLE(1,3);
          bar(410,199,520,223);
          setcolor(0);
          settextstyle(0,0,1);
          outtextxy(465,207,'Derniere Note');
          outtextxy(465,217,'De l''armure');
          affbouton(420,235,90,18,'DO',80);
          affbouton(420,256,90,18,'RE',81);
          affbouton(420,277,90,18,'MI',82);
          affbouton(420,298,90,18,'FA',83);
          affbouton(420,319,90,18,'SOL',84);
          affbouton(420,340,90,18,'LA',85);
          affbouton(420,361,90,18,'SI',86);

          notearmure:=80;
          boutonselect(notearmure);
          c:=readkey;
          while (ord(c)<>13) do
          begin
               case ord(c) of
                    80:inc(notearmure);
                    72:dec(notearmure);
               end;
               if notearmure<80 then notearmure:=86;
               if notearmure>86 then notearmure:=80;
               boutonselect(notearmure);
               c:=readkey;
          end;
          boutonappuie(notearmure);
          boutonrepos(notearmure);

          putimage(390,180,img^,copyput);
          freemem(img,size);

          if armcourant=46 then case notearmure of
                                     80:notetrans:=2;
                                     81:notetrans:=4;
                                     82:notetrans:=6;
                                     83:notetrans:=1;
                                     84:notetrans:=3;
                                     85:notetrans:=5;
                                     86:notetrans:=7;
                                 end else
                                     case notearmure of
                                          80:notetrans:=6;
                                          81:notetrans:=4;
                                          82:notetrans:=2;
                                          83:notetrans:=7;
                                          84:notetrans:=5;
                                          85:notetrans:=3;
                                          86:notetrans:=1;
                                     end;

          if armcourant=46 then
          begin
               if notetrans>0 then
               begin
                    signe_transf(colcourant,linecourant-10,20,20,1);
                    inc(colcourant,8);
               end;
               if notetrans>1 then
               begin
                    signe_transf(colcourant,linecourant-4,20,20,1);
                    inc(colcourant,8);
               end;
               if notetrans>2 then
               begin
                    signe_transf(colcourant,linecourant-12,20,20,1);
                    inc(colcourant,8);
               end;
               if notetrans>3 then
               begin
                    signe_transf(colcourant,linecourant-6,20,20,1);
                    inc(colcourant,8);
               end;
               if notetrans>4 then
               begin
                    signe_transf(colcourant,linecourant,20,20,1);
                    inc(colcourant,8);
               end;
               if notetrans>5 then
               begin
                    signe_transf(colcourant,linecourant-8,20,20,1);
                    inc(colcourant,8);
               end;
               if notetrans>6 then
               begin
                    signe_transf(colcourant,linecourant-2,20,20,1);
                    inc(colcourant,8);
               end;
          end
          else
          begin
               if notetrans>0 then
               begin
                    signe_transf(colcourant,linecourant-6,20,20,2);
                    inc(colcourant,8);
               end;
               if notetrans>1 then
               begin
                    signe_transf(colcourant,linecourant-12,20,20,2);
                    inc(colcourant,8);
               end;
               if notetrans>2 then
               begin
                    signe_transf(colcourant,linecourant-4,20,20,2);
                    inc(colcourant,8);
               end;
               if notetrans>3 then
               begin
                    signe_transf(colcourant,linecourant-10,20,20,2);
                    inc(colcourant,8);
               end;
               if notetrans>4 then
               begin
                    signe_transf(colcourant,linecourant-16,20,20,2);
                    inc(colcourant,8);
               end;
               if notetrans>5 then
               begin
                    signe_transf(colcourant,linecourant-8,20,20,2);
                    inc(colcourant,8);
               end;
               if notetrans>6 then
               begin
                    signe_transf(colcourant,linecourant-14,20,20,2);
                    inc(colcourant,8);
               end;
          end;
          boutonrepos(armcourant);
          retourline;
     end;

     {===saisie de la note===}
     durpreced:=35;
     pospreced:=55;
     transpreced:=46;
     repetpreced:=27;
     boutonselect(pospreced);
     c:=readkey;
     while (ord(c)<>27) do
     begin
     if C=#0 THEN C:=readkey;
     if C=#19 then
     begin
          {===saisie de signes de repetition===}
          repetcourant:=repetpreced;
          boutonselect(repetcourant);
          while (ord(c)<>13) and (ord(c)<>27) do
          begin
               case ord(c) of
                    77:inc(repetcourant);
                    75:dec(repetcourant);
               end;
               if repetcourant<27  then repetcourant:=34;
               if repetcourant>34 then repetcourant:=27;
               boutonselect(repetcourant);
               c:=readkey;
          end;
          if ord(c)<>27 then
          begin
               boutonappuie(repetcourant);
               if repetcourant<>34 then
               begin
                    case repetcourant of
                         27,32:begin
                                    audessus:=19;
                                    signe_repet(colcourant,linecourant-audessus,20,20,repetcourant-26);
                                    inc(colcourant,15);
                               end;
                         28,29,30,31,33:begin
                                             audessus:=3;
                                             signe_repet(colcourant,linecourant-audessus,20,20,repetcourant-26);
                                             inc(colcourant,15);
                                        end;
                    end;
               end
               else
               begin
                    settextstyle(2,0,4);
                    outtextxy(colcourant+10,linecourant-10,'Fin');
                    inc(colcourant,15);
               end;
               boutonrepos(repetcourant);
               retourline;
          end;
     end;

     poscourant:=pospreced;
     c:=readkey;
     while (ord(c)<>13) do
     begin
           case ord(c) of
                77:inc(poscourant);
                75:dec(poscourant);
           end;
           if poscourant<55 then
           begin
                if not noteprimeaff then
                begin
                     affnotesprime(2,188);
                     noteprimeaff:=true;
                end;
                poscourant:=66;
           end;
           if poscourant>66 then
           begin
                if noteprimeaff then
                begin
                     affnotesSecond(2,188);
                     noteprimeaff:=false;
                end;
                poscourant:=56;
           end;
           boutonselect(poscourant);
           c:=readkey;
     end;

     pospreced:=poscourant;
     boutonappuie(poscourant);
     if (pospreced=55) and (not dursilenaff) then
     begin
          dursilenaff:=true;
          affdursilen(2,136);
     end;

     if (pospreced<>55) and (dursilenaff) then
     begin
          affduree(2,136);
          dursilenaff:=false;
     end;

     durcourant:=durpreced;
     boutonselect(durcourant);

     c:=readkey;
     while (ord(c)<>13) do
     begin
           case ord(c) of
                77:inc(durcourant);
                75:dec(durcourant);
           end;
           if durcourant<35 then durcourant:=41;
           if durcourant>41 then durcourant:=35;
           boutonselect(durcourant);
           c:=readkey;
     end;
     boutonappuie(durcourant);

     if pospreced=55 then dursilen(colcourant,linecourant-3,20,20,durcourant-34)
     else
     begin

          {===saisie de signes de transformation===}
          transcourant:=transpreced;
          boutonselect(transcourant);
          c:=readkey;
          while (ord(c)<>13) and (ord(c)<>27) do
          begin
               case ord(c) of
                    77:inc(transcourant);
                    75:dec(transcourant);
               end;
               if transcourant<46  then transcourant:=51;
               if transcourant>51 then transcourant:=46;
               boutonselect(transcourant);
               c:=readkey;
          end;
          if ord(c)<>27 then
          begin
               boutonappuie(transcourant);
               if colcourant+9>625 then
               begin
                    colcourant:=5;
                    inc(linecourant,40);
                    case clecourant of
                         2:audessus:=2;
                         3:audessus:=3;
                         4:audessus:=3;
                         5:audessus:=-5;
                         6:audessus:=-1;
                         7:audessus:=3;
                         8:audessus:=7;
                    end;
                    cle(colcourant,linecourant-audessus,20,20,clecourant-1);
                    inc(colcourant,15);
               end;
               if (not noteprimeaff) and (poscourant=56) then
               begin
                    signe_transf(colcourant,linecourant-7,20,20,transcourant-45);
               end
               else if (not noteprimeaff) and (poscourant<>56) then
               begin
                    signe_transf(colcourant,linecourant+115-poscourant*2,20,20,transcourant-45);
               end
                  else signe_transf(colcourant,linecourant+127-poscourant*2,20,20,transcourant-45);
               inc(colcourant,9);
               boutonrepos(transcourant);

          end;
          transpreced:=transcourant;

          setcolor(1);
          if noteprimeaff then
          begin
               case pospreced of
                    56:begin
                            line(colcourant+1,linecourant+19,colcourant+13,linecourant+19);
                            line(colcourant+1,linecourant+22,colcourant+13,linecourant+22);
                            line(colcourant+1,linecourant+25,colcourant+13,linecourant+25);
                            audessus:=-12;
                            end;
                    57:begin
                            line(colcourant+1,linecourant+19,colcourant+13,linecourant+19);
                            line(colcourant+1,linecourant+22,colcourant+13,linecourant+22);
                            line(colcourant+1,linecourant+25,colcourant+13,linecourant+25);
                            audessus:=-9;
                    end;
                    58:begin
                            line(colcourant+1,linecourant+19,colcourant+13,linecourant+19);
                            line(colcourant+1,linecourant+22,colcourant+13,linecourant+22);
                            audessus:=-8;
                    end;
                    59:begin
                            line(colcourant+1,linecourant+19,colcourant+13,linecourant+19);
                            line(colcourant+1,linecourant+22,colcourant+13,linecourant+22);
                            audessus:=-6;
                    end;
                    60:begin
                            line(colcourant+1,linecourant+19,colcourant+13,linecourant+19);
                            audessus:=-5;
                    end;
                    61:begin
                            line(colcourant+1,linecourant+19,colcourant+13,linecourant+19);
                            audessus:=-3;
                    end;
                    62:audessus:=-2;
                    63:audessus:=0;
                    64:audessus:=2;
                    65:audessus:=4;
                    66:audessus:=6;
              end;
              duree(colcourant,linecourant-audessus,20,20,durcourant-34);
          end;
          if not noteprimeaff then
          begin
               if pospreced=56 then
               begin
                    audessus:=8;
                    duree(colcourant,linecourant-audessus,20,20,durcourant-34);
               end
               else
               begin
                    case pospreced of
                         57:audessus:=-1;
                         58:audessus:=1;
                         59:audessus:=3;
                         60:audessus:=5;
                         61:audessus:=7;
                         62:begin
                                 line(colcourant+6,linecourant-3,colcourant+17,linecourant-3);
                                 audessus:=8;
                         end;
                         63:begin
                                 line(colcourant+6,linecourant-3,colcourant+17,linecourant-3);
                                 audessus:=10;
                         end;
                         64:begin
                                 line(colcourant+6,linecourant-3,colcourant+17,linecourant-3);
                                 line(colcourant+6,linecourant-6,colcourant+17,linecourant-6);
                                 audessus:=11;
                         end;
                         65:begin
                                 line(colcourant+6,linecourant-3,colcourant+17,linecourant-3);
                                 line(colcourant+6,linecourant-6,colcourant+17,linecourant-6);
                                 audessus:=13;
                         end;
                         66:begin
                                 line(colcourant+6,linecourant-3,colcourant+17,linecourant-3);
                                 line(colcourant+6,linecourant-6,colcourant+17,linecourant-6);
                                 line(colcourant+6,linecourant-9,colcourant+17,linecourant-9);
                                 audessus:=14;
                         end;
                    end;
                    case durcourant of
                         35:duree(colcourant,linecourant-audessus,20,20,12);
                         36:duree(colcourant,linecourant-audessus,20,20,13);
                         37:duree(colcourant,linecourant-audessus,20,20,14);
                         38:duree(colcourant,linecourant-audessus,20,20,15);
                         39:duree(colcourant,linecourant-audessus,20,20,16);
                         40:duree(colcourant,linecourant-audessus,20,20,17);
                         41:duree(colcourant,linecourant-audessus,20,20,18);
                    end;
               end;
          end;
     end;
     boutonrepos(durcourant);
     boutonrepos(pospreced);
     inc(colcourant,15);
     retourline;
     durpreced:=durcourant;
     boutonselect(poscourant);
     c:=readkey;

     end;
     ch:=readkey;
     boutonRepos(clecourant);
     boutonrepos(mescourant);
     boutonrepos(vitcourant);

     end;

end;

begin
     clrscr;
     GS:=9;
     GM:=2;
     initgraph(GS,GM,'\montre');
     I:=0;
     SETCOLOR(0);

     ECRANSAISIE;

     SAISIE;

     menu;
     read(c);
     closegraph;
end.